//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "recipe")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)] // Skip deserializing
    pub id: i32,
    pub title: String,
    #[serde(skip_deserializing)] // Skip deserializing
    pub slug: String,
    pub roaster: String,
    pub temp: String,
    pub link: String,
    pub shop_link: String,
    pub machine: String,
    pub creator: String,
    pub user_id: i32,
    pub brewer_id: i32,
    pub roast_id: i32,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::brewer::Entity",
        from = "Column::BrewerId",
        to = "super::brewer::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Brewer,
    #[sea_orm(
        belongs_to = "super::roast::Entity",
        from = "Column::RoastId",
        to = "super::roast::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Roast,
    #[sea_orm(has_many = "super::tag_recipe::Entity")]
    TagRecipe,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::brewer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Brewer.def()
    }
}

impl Related<super::roast::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Roast.def()
    }
}

impl Related<super::tag_recipe::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TagRecipe.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
